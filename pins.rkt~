#lang racket

(define (keypad) (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 0)))

(define (up x)
  (match x
    [x #:when (> x 0) (- x 1)]
    [x '()]))

(define (down x)
  (match x
    [x #:when (< x 2) (+ x 1)]
    [x '()]))

(define (perms x) (cons (up x) (down x)))

(define (m x)
  (match x
    [x #:when (eq? 0 x) 3]
    [x #:when (and (>= x 0) (<= x 1)) 0]
    [x #:when (and (>= x 1) (<= x 2)) 1]
    [x #:when (and (>= x 2) (<= x 3)) 2]
    [x '()]))

(define (number-to-pad-position num)
  (define num-as-num (string->number num))
  (define column (m (/ num-as-num 3)))
  (define row (- (- num-as-num (* (m (/ num-as-num 3)) 3)) 1))

  ; we need to pivot around row and column using the permutations below
  ; eg fix row and pivot the column then fix the column and pivot the row
  ; 4 = 1 0 = column pivot 1 0 & 1 1 = row pivot 0 0 & 1 0 & 2 0
  (list (flatten (cons column (perms column))) (cons row (flatten (perms row)))))

(define (get-row num)
  (map (lambda (num)
        (number-to-pad-position num)
  ) num))

(define (run approxpin)
  (get-row (map string (string->list (number->string approxpin)))))

(run 4)